# Name of the workflow
name: CI

# Trigger conditions for the workflow
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  release:
    types: [created]

# Set permissions for the workflow, especially for the docs/github pages job
permissions:
  contents: write
  pages: write
  id-token: write

# Workflow jobs
jobs:
  # Base job that installs dependencies and sets up the environment
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3  # Updated from v2 for improved security and features

      - name: Set up Python
        uses: actions/setup-python@v4  # Updated from v2 for better Python 3.12 support
        with:
          python-version: '3.12'
          cache: 'pip'  # Enable pip caching to speed up subsequent runs

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH  # Ensure Poetry is in PATH

      - name: Configure Poetry
        run: |
          poetry config virtualenvs.create false

      - name: Install dependencies
        run: poetry install --no-interaction --no-ansi

      # Cache the virtual environment to make it available to other jobs
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.cache/pypoetry
            .venv
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

  # Job to check code quality
  code-quality:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      # Re-checkout code since jobs run on different runners
      - name: Checkout code
        uses: actions/checkout@v3

      # Restore Python setup
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip'

      # Restore Poetry installation
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      # Restore cached dependencies
      - name: Restore cached dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.cache/pypoetry
            .venv
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}

      # Install dependencies in case cache miss
      - name: Install dependencies
        run: poetry install --no-interaction --no-ansi

      - name: Run ruff
        run: poetry run ruff .

  # Job to run tests
  test:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      # Same setup as code-quality job
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Restore cached dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.cache/pypoetry
            .venv
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        run: poetry install --no-interaction --no-ansi

      - name: Run tests
        run: poetry run pytest

  # Job to build and test Docker image
  docker:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      # Minimal setup for Docker build
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Docker Buildx for improved build performance
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        run: docker build -t templify .

      # Remove interactive flag (-it) which can cause CI failures
      - name: Run Docker container
        run: docker run --rm templify

  # Job to deploy package to PyPI on release
  deploy:
    runs-on: ubuntu-latest
    needs: [setup, code-quality, test, docker]
    if: github.event_name == 'release'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Build and publish to PyPI
        run: |
          poetry build
          poetry publish --username ${{ secrets.PYPI_USERNAME }} --password ${{ secrets.PYPI_PASSWORD }}

  # Job to build and deploy documentation
  docs:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Restore cached dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.cache/pypoetry
            .venv
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        run: poetry install --no-interaction --no-ansi

      - name: Build documentation
        run: poetry run mkdocs build

      # Deployment to GitHub Pages is now handled in static.yml
      # - name: Deploy documentation to GitHub Pages
      #   uses: peaceiris/actions-gh-pages@v3
      #   with:
      #     github_token: ${{ secrets.GITHUB_TOKEN }}
      #     publish_dir: site

  # Notification job that runs after all other jobs
  notify:
    runs-on: ubuntu-latest
    needs: [setup, code-quality, test, docker, deploy, docs]
    if: always()  # Ensure this job always runs, even if previous jobs fail
    steps:
      - name: Notify on success
        if: success()
        run: echo "Build succeeded!"

      - name: Notify on failure
        if: failure()
        run: echo "Build failed!"
