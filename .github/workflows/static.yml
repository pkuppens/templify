# Simple workflow for deploying static content and documentation to GitHub Pages
name: Deploy static content and documentation

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]
    paths:
      - 'docs/**'
      - 'static/**'
      - 'mkdocs.yml'
      - 'pyproject.toml'
      - 'poetry.lock'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository content
      - uses: actions/checkout@v4

      # Setup Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      # Install Poetry
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.7.1
          virtualenvs-create: true
          virtualenvs-in-project: true

      # Load cached venv
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      # Install dependencies
      - name: Install dependencies
        run: poetry install --with dev

      # Validate all markdown links in docs directory
      - name: Validate Markdown Links
        uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          folder-path: 'docs'

      # Ensure the main documentation entry point exists
      - name: Check index.md exists
        run: |
          if [ ! -f docs/index.md ]; then
            echo "Error: docs/index.md is missing!"
            exit 1
          fi

      # Build documentation
      - name: Build documentation
        run: poetry run mkdocs build --strict

      # Create .nojekyll file
      - name: Create .nojekyll file
        run: touch site/.nojekyll

  # Deploy documentation to GitHub Pages
  deploy:
    needs: validate
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      # Checkout repository content
      - name: Checkout
        uses: actions/checkout@v4

      # Setup GitHub Pages configuration
      - name: Setup Pages
        uses: actions/configure-pages@v5

      # Upload documentation as artifact
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload the built site
          path: './site'

      # Deploy to GitHub Pages
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
