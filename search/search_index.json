{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Templify A powerful templating library that supports multiple template formats and data structures. Features Text template rendering with placeholders Recursive data structure templating JMESPath query support for complex data transformations Full Jinja2 template support including: Control structures (if/else, for loops) Template inheritance and includes Filters and macros Custom filters and extensions PDF document templating (coming soon) Quick Start from templify import render_text template = \"Hello, {name}! You have {count} new messages.\" context = {\"name\": \"Alice\", \"count\": 5} result = render_text(template, context) # Result: \"Hello, Alice! You have 5 new messages.\" Installation pip install templify Documentation Sections Getting Started - Quick start guide and basic usage Installation - Detailed installation instructions Templates - Template formats and syntax Advanced Usage - Advanced features and patterns API Reference - Complete API documentation Development - Contributing guidelines Architecture - System design and components Requirements - Project requirements Changelog - Version history and changes Examples Data Structure Templates from templify import render_data template = { \"user\": { \"name\": \"{name}\", \"email\": \"{email}\" }, \"settings\": { \"theme\": \"{theme}\", \"notifications\": \"{notifications}\" } } context = { \"name\": \"Alice\", \"email\": \"alice@example.com\", \"theme\": \"dark\", \"notifications\": True } result = render_data(template, context) JMESPath Queries from templify import render_data template = { \"summary\": 'Top product: {{ products | jmespath(\"max_by(@, &sales).name\") }}', \"total\": 'Revenue: {{ products | jmespath(\"sum(@[].revenue)\") }}' } context = { \"products\": [ {\"name\": \"Product A\", \"sales\": 100, \"revenue\": 1000}, {\"name\": \"Product B\", \"sales\": 150, \"revenue\": 2000} ] } result = render_data(template, context) Jinja2 Templates from templify import render_jinja2 template = \"\"\" {% if user.is_admin %} Welcome, Administrator {{ user.name }}! {% else %} Welcome, {{ user.name }}! {% endif %} Your recent activity: {% for activity in user.recent_activities %} - {{ activity.type }}: {{ activity.description }} {% endfor %} \"\"\" context = { \"user\": { \"name\": \"Alice\", \"is_admin\": True, \"recent_activities\": [ {\"type\": \"login\", \"description\": \"Logged in from Chrome\"}, {\"type\": \"edit\", \"description\": \"Updated profile\"} ] } } result = render_jinja2(template, context) Contributing We welcome contributions! Please see our Contributing Guide for details. License MIT License - see LICENSE for details.","title":"Home"},{"location":"#templify","text":"A powerful templating library that supports multiple template formats and data structures.","title":"Templify"},{"location":"#features","text":"Text template rendering with placeholders Recursive data structure templating JMESPath query support for complex data transformations Full Jinja2 template support including: Control structures (if/else, for loops) Template inheritance and includes Filters and macros Custom filters and extensions PDF document templating (coming soon)","title":"Features"},{"location":"#quick-start","text":"from templify import render_text template = \"Hello, {name}! You have {count} new messages.\" context = {\"name\": \"Alice\", \"count\": 5} result = render_text(template, context) # Result: \"Hello, Alice! You have 5 new messages.\"","title":"Quick Start"},{"location":"#installation","text":"pip install templify","title":"Installation"},{"location":"#documentation-sections","text":"Getting Started - Quick start guide and basic usage Installation - Detailed installation instructions Templates - Template formats and syntax Advanced Usage - Advanced features and patterns API Reference - Complete API documentation Development - Contributing guidelines Architecture - System design and components Requirements - Project requirements Changelog - Version history and changes","title":"Documentation Sections"},{"location":"#examples","text":"","title":"Examples"},{"location":"#data-structure-templates","text":"from templify import render_data template = { \"user\": { \"name\": \"{name}\", \"email\": \"{email}\" }, \"settings\": { \"theme\": \"{theme}\", \"notifications\": \"{notifications}\" } } context = { \"name\": \"Alice\", \"email\": \"alice@example.com\", \"theme\": \"dark\", \"notifications\": True } result = render_data(template, context)","title":"Data Structure Templates"},{"location":"#jmespath-queries","text":"from templify import render_data template = { \"summary\": 'Top product: {{ products | jmespath(\"max_by(@, &sales).name\") }}', \"total\": 'Revenue: {{ products | jmespath(\"sum(@[].revenue)\") }}' } context = { \"products\": [ {\"name\": \"Product A\", \"sales\": 100, \"revenue\": 1000}, {\"name\": \"Product B\", \"sales\": 150, \"revenue\": 2000} ] } result = render_data(template, context)","title":"JMESPath Queries"},{"location":"#jinja2-templates","text":"from templify import render_jinja2 template = \"\"\" {% if user.is_admin %} Welcome, Administrator {{ user.name }}! {% else %} Welcome, {{ user.name }}! {% endif %} Your recent activity: {% for activity in user.recent_activities %} - {{ activity.type }}: {{ activity.description }} {% endfor %} \"\"\" context = { \"user\": { \"name\": \"Alice\", \"is_admin\": True, \"recent_activities\": [ {\"type\": \"login\", \"description\": \"Logged in from Chrome\"}, {\"type\": \"edit\", \"description\": \"Updated profile\"} ] } } result = render_jinja2(template, context)","title":"Jinja2 Templates"},{"location":"#contributing","text":"We welcome contributions! Please see our Contributing Guide for details.","title":"Contributing"},{"location":"#license","text":"MIT License - see LICENSE for details.","title":"License"},{"location":"DEVELOP/","text":"Development Guide This guide will help you set up your development environment for Templify. Prerequisites Python 3.12+ Windows Download Python 3.12 from the official Python website Run the installer Make sure to check \"Add Python to PATH\" during installation Verify installation: cmd python --version Ubuntu/Debian sudo add-apt-repository ppa:deadsnakes/ppa sudo apt update sudo apt install python3.12 python3.12-venv macOS brew install python@3.12 Poetry Windows winget install poetry Ubuntu/Debian and macOS curl -sSL https://install.python-poetry.org | python3 - Verify Installation python --version # Should show Python 3.12.x poetry --version # Should show Poetry version Project Setup Clone the repository: bash git clone https://github.com/pkuppens/templify.git cd templify Install dependencies: bash poetry install Activate the virtual environment: bash poetry shell Development Workflow Running Tests # Run all tests pytest # Run tests with coverage pytest --cov=templify # Run specific test file pytest tests/test_core.py Code Quality The project uses several tools to maintain code quality: - Ruff for linting and code formatting - replaces black, flake8, and isort - MyPy for type checking Run all checks: # Run linter and formatter ruff check . # Type checking mypy . Project Structure templify/ \u251c\u2500\u2500 src/ \u2502 \u2514\u2500\u2500 templify/ \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 core.py \u2502 \u2514\u2500\u2500 utils.py \u251c\u2500\u2500 tests/ \u2502 \u251c\u2500\u2500 test_core.py \u2502 \u251c\u2500\u2500 test_utils.py \u2502 \u2514\u2500\u2500 fixtures/ \u251c\u2500\u2500 docs/ \u251c\u2500\u2500 pyproject.toml \u2514\u2500\u2500 README.md Common Issues Windows-specific If poetry command is not found after installation: Add Poetry to PATH: %APPDATA%\\Python\\Scripts Restart your terminal If Python 3.12 is not found: Verify Python installation in System Settings > Apps Check PATH environment variable Unix/macOS-specific If Poetry installation fails: bash # Try installing with pip pip install poetry If Python 3.12 is not found: ```bash # On Ubuntu/Debian sudo apt install python3.12-venv # On macOS brew link python@3.12 ``` Getting Help Check the GitHub Issues Join our Discussions Contact the maintainers Additional Information README.md INSTALL.md IMPLEMENTATION_PLAN.md","title":"Development Guide"},{"location":"DEVELOP/#development-guide","text":"This guide will help you set up your development environment for Templify.","title":"Development Guide"},{"location":"DEVELOP/#prerequisites","text":"","title":"Prerequisites"},{"location":"DEVELOP/#python-312","text":"","title":"Python 3.12+"},{"location":"DEVELOP/#windows","text":"Download Python 3.12 from the official Python website Run the installer Make sure to check \"Add Python to PATH\" during installation Verify installation: cmd python --version","title":"Windows"},{"location":"DEVELOP/#ubuntudebian","text":"sudo add-apt-repository ppa:deadsnakes/ppa sudo apt update sudo apt install python3.12 python3.12-venv","title":"Ubuntu/Debian"},{"location":"DEVELOP/#macos","text":"brew install python@3.12","title":"macOS"},{"location":"DEVELOP/#poetry","text":"","title":"Poetry"},{"location":"DEVELOP/#windows_1","text":"winget install poetry","title":"Windows"},{"location":"DEVELOP/#ubuntudebian-and-macos","text":"curl -sSL https://install.python-poetry.org | python3 -","title":"Ubuntu/Debian and macOS"},{"location":"DEVELOP/#verify-installation","text":"python --version # Should show Python 3.12.x poetry --version # Should show Poetry version","title":"Verify Installation"},{"location":"DEVELOP/#project-setup","text":"Clone the repository: bash git clone https://github.com/pkuppens/templify.git cd templify Install dependencies: bash poetry install Activate the virtual environment: bash poetry shell","title":"Project Setup"},{"location":"DEVELOP/#development-workflow","text":"","title":"Development Workflow"},{"location":"DEVELOP/#running-tests","text":"# Run all tests pytest # Run tests with coverage pytest --cov=templify # Run specific test file pytest tests/test_core.py","title":"Running Tests"},{"location":"DEVELOP/#code-quality","text":"The project uses several tools to maintain code quality: - Ruff for linting and code formatting - replaces black, flake8, and isort - MyPy for type checking Run all checks: # Run linter and formatter ruff check . # Type checking mypy .","title":"Code Quality"},{"location":"DEVELOP/#project-structure","text":"templify/ \u251c\u2500\u2500 src/ \u2502 \u2514\u2500\u2500 templify/ \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 core.py \u2502 \u2514\u2500\u2500 utils.py \u251c\u2500\u2500 tests/ \u2502 \u251c\u2500\u2500 test_core.py \u2502 \u251c\u2500\u2500 test_utils.py \u2502 \u2514\u2500\u2500 fixtures/ \u251c\u2500\u2500 docs/ \u251c\u2500\u2500 pyproject.toml \u2514\u2500\u2500 README.md","title":"Project Structure"},{"location":"DEVELOP/#common-issues","text":"","title":"Common Issues"},{"location":"DEVELOP/#windows-specific","text":"If poetry command is not found after installation: Add Poetry to PATH: %APPDATA%\\Python\\Scripts Restart your terminal If Python 3.12 is not found: Verify Python installation in System Settings > Apps Check PATH environment variable","title":"Windows-specific"},{"location":"DEVELOP/#unixmacos-specific","text":"If Poetry installation fails: bash # Try installing with pip pip install poetry If Python 3.12 is not found: ```bash # On Ubuntu/Debian sudo apt install python3.12-venv # On macOS brew link python@3.12 ```","title":"Unix/macOS-specific"},{"location":"DEVELOP/#getting-help","text":"Check the GitHub Issues Join our Discussions Contact the maintainers","title":"Getting Help"},{"location":"DEVELOP/#additional-information","text":"README.md INSTALL.md IMPLEMENTATION_PLAN.md","title":"Additional Information"},{"location":"IMPLEMENTATION_PLAN/","text":"IMPLEMENTATION_PLAN.md Introduction This document provides a detailed implementation plan for the Templify project. It includes instructions for GitHub Copilot, developers, and AI coding assistants to follow. Instructions for GitHub Copilot, Developers, and AI Coding Assistants Follow the tasks and subtasks listed below to complete the implementation of the Templify project. Mark completed and tested items as checkboxes. Tasks and Subtasks Task 1: Initialize Project Files Subtask 1.1: Create pyproject.toml Subtask 1.2: Add standard .gitignore for Python Task 2: Setup Basic Documentation Subtask 2.1: Generate INSTALL.md Subtask 2.2: Generate DEVELOP.md Subtask 2.3: Generate IMPLEMENTATION_PLAN.md Task 3: Tooling Configuration Subtask 3.1: Configure ruff for code quality checks Subtask 3.2: Configure pytest for testing Subtask 3.3: Create Dockerfile and docker-compose.yml : create docker image for testing. Task 4: Establish Project Structure Subtask 4.1: Create src/templify/ Subtask 4.2: Create tests/ Subtask 4.3: Create docs/ Subtask 4.4: Create .github/workflows/ci.yml Subtask 4.5: Place # TODO: placeholders for future tasks Additional Information README.md INSTALL.md DEVELOP.md IMPLEMENTATION_PLAN.md","title":"IMPLEMENTATION_PLAN.md"},{"location":"IMPLEMENTATION_PLAN/#implementation_planmd","text":"","title":"IMPLEMENTATION_PLAN.md"},{"location":"IMPLEMENTATION_PLAN/#introduction","text":"This document provides a detailed implementation plan for the Templify project. It includes instructions for GitHub Copilot, developers, and AI coding assistants to follow.","title":"Introduction"},{"location":"IMPLEMENTATION_PLAN/#instructions-for-github-copilot-developers-and-ai-coding-assistants","text":"Follow the tasks and subtasks listed below to complete the implementation of the Templify project. Mark completed and tested items as checkboxes.","title":"Instructions for GitHub Copilot, Developers, and AI Coding Assistants"},{"location":"IMPLEMENTATION_PLAN/#tasks-and-subtasks","text":"Task 1: Initialize Project Files Subtask 1.1: Create pyproject.toml Subtask 1.2: Add standard .gitignore for Python Task 2: Setup Basic Documentation Subtask 2.1: Generate INSTALL.md Subtask 2.2: Generate DEVELOP.md Subtask 2.3: Generate IMPLEMENTATION_PLAN.md Task 3: Tooling Configuration Subtask 3.1: Configure ruff for code quality checks Subtask 3.2: Configure pytest for testing Subtask 3.3: Create Dockerfile and docker-compose.yml : create docker image for testing. Task 4: Establish Project Structure Subtask 4.1: Create src/templify/ Subtask 4.2: Create tests/ Subtask 4.3: Create docs/ Subtask 4.4: Create .github/workflows/ci.yml Subtask 4.5: Place # TODO: placeholders for future tasks","title":"Tasks and Subtasks"},{"location":"IMPLEMENTATION_PLAN/#additional-information","text":"README.md INSTALL.md DEVELOP.md IMPLEMENTATION_PLAN.md","title":"Additional Information"},{"location":"INSTALL/","text":"INSTALL.md Prerequisites Python 3.12+ Poetry Installation Steps Clone the repository: sh git clone https://github.com/pkuppens/templify.git cd templify Install dependencies using Poetry: sh poetry install Set up the virtual environment: sh poetry shell Running the Project Run the project locally: sh python -m templify Run tests using pytest : sh pytest Docker Setup Build the Docker container: sh docker build -t templify . Run the Docker container: sh docker run -it --rm templify Use docker-compose to set up the environment: sh docker-compose up Additional Information README.md DEVELOP.md IMPLEMENTATION_PLAN.md","title":"INSTALL.md"},{"location":"INSTALL/#installmd","text":"","title":"INSTALL.md"},{"location":"INSTALL/#prerequisites","text":"Python 3.12+ Poetry","title":"Prerequisites"},{"location":"INSTALL/#installation-steps","text":"Clone the repository: sh git clone https://github.com/pkuppens/templify.git cd templify Install dependencies using Poetry: sh poetry install Set up the virtual environment: sh poetry shell","title":"Installation Steps"},{"location":"INSTALL/#running-the-project","text":"Run the project locally: sh python -m templify Run tests using pytest : sh pytest","title":"Running the Project"},{"location":"INSTALL/#docker-setup","text":"Build the Docker container: sh docker build -t templify . Run the Docker container: sh docker run -it --rm templify Use docker-compose to set up the environment: sh docker-compose up","title":"Docker Setup"},{"location":"INSTALL/#additional-information","text":"README.md DEVELOP.md IMPLEMENTATION_PLAN.md","title":"Additional Information"},{"location":"development/architecture/","text":"Architecture This document describes the architecture and design of the Templify library, focusing on practical use cases and real-world scenarios. Overview Templify is designed as a modular and extensible templating library that supports multiple template formats and data structures. The architecture follows clean architecture principles with clear separation of concerns. System Components Core Components graph TD A[Template Engine] --> B[Text Renderer] A --> C[Data Renderer] A --> D[Jinja2 Renderer] B --> E[Template Parser] C --> F[JMESPath Engine] D --> G[Jinja2 Environment] 1. Template Engine Purpose : Central coordinator for all template operations Responsibilities : - Route templates to appropriate renderer based on format - Manage template lifecycle (loading, caching, rendering) - Provide unified API for all template types - Handle error propagation and recovery Example Use Case : # Template Engine automatically detects format and routes to appropriate renderer from templify import render # Text template result1 = render(\"Hello, {name}!\", {\"name\": \"Alice\"}) # Data structure template result2 = render({ \"user\": {\"name\": \"{name}\"}, \"settings\": {\"theme\": \"{theme}\"} }, {\"name\": \"Alice\", \"theme\": \"dark\"}) # Jinja2 template result3 = render(\"\"\" {% if user.is_admin %} Welcome, Administrator {{ user.name }}! {% endif %} \"\"\", {\"user\": {\"name\": \"Alice\", \"is_admin\": True}}) 2. Text Renderer Purpose : Handle simple text-based templates with placeholders Responsibilities : - Process basic string interpolation - Handle escape sequences and special characters - Support default values and optional variables - Optimize for high-performance text processing Example Use Case : # Simple text template with defaults template = \"Welcome, {name}! Your balance is {balance:0.00}\" context = {\"name\": \"Alice\"} result = render_text(template, context) # Result: \"Welcome, Alice! Your balance is 0.00\" # Text template with escaping template = \"Path: {path}\" context = {\"path\": \"C:\\\\Users\\\\Alice\"} result = render_text(template, context) # Result: \"Path: C:\\Users\\Alice\" 3. Data Renderer Purpose : Process structured data templates with JMESPath support Responsibilities : - Transform complex data structures - Execute JMESPath queries - Handle recursive template application - Validate data types and structure Example Use Case : # Complex data transformation template = { \"summary\": { \"total_sales\": \"{{ sales | jmespath('sum(@[].amount)') }}\", \"top_product\": \"{{ products | jmespath('max_by(@, &revenue).name') }}\" }, \"recent_orders\": \"{{ orders | jmespath('sort_by(@, &date)[-3:]') }}\" } context = { \"sales\": [ {\"amount\": 100, \"date\": \"2024-01-01\"}, {\"amount\": 200, \"date\": \"2024-01-02\"} ], \"products\": [ {\"name\": \"Product A\", \"revenue\": 1000}, {\"name\": \"Product B\", \"revenue\": 2000} ], \"orders\": [ {\"id\": 1, \"date\": \"2024-01-01\"}, {\"id\": 2, \"date\": \"2024-01-02\"}, {\"id\": 3, \"date\": \"2024-01-03\"}, {\"id\": 4, \"date\": \"2024-01-04\"} ] } 4. Jinja2 Renderer Purpose : Provide full Jinja2 template capabilities Responsibilities : - Execute Jinja2 templates with inheritance - Manage template includes and macros - Handle custom filters and extensions - Support template caching Example Use Case : # Template inheritance base_template = \"\"\" {% block content %} Welcome, {{ user.name }}! {% endblock %} \"\"\" child_template = \"\"\" {% extends \"base\" %} {% block content %} {{ super() }} Your recent activity: {% for activity in user.recent_activities %} - {{ activity.type }}: {{ activity.description }} {% endfor %} {% endblock %} \"\"\" # Custom filter @jinja2_env.filter def format_currency(value): return f\"${value:,.2f}\" # Usage template = \"Total: {{ amount | format_currency }}\" context = {\"amount\": 1234.56} Data Flow sequenceDiagram participant User participant Engine participant Parser participant Renderer participant Cache Note over User: User wants to generate<br/>a personalized report User->>Engine: render(template, context) Note over Engine: Template Engine detects<br/>format and loads template Engine->>Cache: get(template) alt Cache Hit Cache-->>Engine: cached_template Note over Engine: Using cached template<br/>for better performance else Cache Miss Engine->>Parser: parse(template) Parser-->>Engine: parsed_template Engine->>Cache: store(parsed_template) Note over Engine: Template parsed and<br/>cached for future use end Engine->>Renderer: render(parsed_template, context) Note over Renderer: Applying context data<br/>and executing template Renderer-->>Engine: result Engine-->>User: result Note over User: User receives<br/>personalized report Extension Points 1. Custom Template Formats Purpose : Allow users to add support for new template formats Example : class CustomTemplateParser(TemplateParser): def parse(self, template: str) -> ParsedTemplate: # Parse custom template format pass def validate(self, template: str) -> bool: # Validate custom template syntax pass # Register custom parser template_engine.register_parser(\"custom\", CustomTemplateParser()) 2. Custom Renderers Purpose : Support new output formats or rendering strategies Example : class PDFRenderer(Renderer): def render(self, template: ParsedTemplate, context: Dict) -> bytes: # Generate PDF from template pass # Register PDF renderer template_engine.register_renderer(\"pdf\", PDFRenderer()) 3. Custom Filters Purpose : Add custom data transformation capabilities Example : @template_engine.register_filter def format_date(value: datetime) -> str: return value.strftime(\"%Y-%m-%d\") # Usage in template template = \"Last updated: {{ date | format_date }}\" Error Handling 1. Template Errors Purpose : Provide clear feedback for template-related issues Example : try: result = render(\"Hello, {name}!\", {}) except TemplateError as e: print(f\"Template error: {e.message}\") print(f\"Missing variables: {e.missing_variables}\") 2. Runtime Errors Purpose : Handle context and execution errors gracefully Example : try: result = render_data({ \"total\": \"{{ sales | jmespath('sum(@[].amount)') }}\" }, {\"sales\": None}) except RuntimeError as e: print(f\"Runtime error: {e.message}\") print(f\"Error context: {e.context}\") Performance Considerations 1. Caching Strategy Purpose : Optimize template processing for repeated use Example : # Template is parsed once and cached template = \"Hello, {name}!\" context1 = {\"name\": \"Alice\"} context2 = {\"name\": \"Bob\"} # Both renders use cached parsed template result1 = render(template, context1) result2 = render(template, context2) 2. Optimization Techniques Purpose : Improve rendering performance for large templates Example : # Pre-compile complex template template = \"\"\" {% for user in users %} {% if user.is_active %} {{ user.name }}: {{ user.balance | format_currency }} {% endif %} {% endfor %} \"\"\" compiled = template_engine.compile(template) # Use compiled template for better performance for batch in user_batches: result = compiled.render(batch) Security 1. Template Security Purpose : Prevent template-based security vulnerabilities Example : # Sandboxed template execution template = \"\"\" {% import os %} {{ os.system('rm -rf /') }} \"\"\" # Raises SecurityError: Import of 'os' not allowed 2. Data Security Purpose : Protect sensitive data in templates Example : # Context isolation template = \"{{ user.password }}\" # Raises SecurityError template = \"{{ user.name }}\" # Allowed Future Extensions 1. Planned Features Purpose : Enhance template capabilities Example : # Future PDF generation template = \"\"\" # Invoice Customer: {{ customer.name }} Items: {% for item in items %} - {{ item.name }}: {{ item.price }} {% endfor %} \"\"\" result = render(template, context, format=\"pdf\") 2. Potential Improvements Purpose : Optimize for specific use cases Example : # Future async rendering async def generate_reports(templates, contexts): tasks = [ render_async(template, context) for template, context in zip(templates, contexts) ] return await asyncio.gather(*tasks) Dependencies Core Dependencies Jinja2: Template engine for complex templating JMESPath: Data querying for transformations typing: Type hints for better IDE support dataclasses: Data structure handling Development Dependencies pytest: Testing framework ruff: Linting mypy: Type checking Testing Strategy 1. Unit Tests Purpose : Verify individual component behavior Example : def test_text_renderer(): renderer = TextRenderer() result = renderer.render(\"Hello, {name}!\", {\"name\": \"Alice\"}) assert result == \"Hello, Alice!\" 2. Integration Tests Purpose : Verify component interactions Example : def test_template_engine(): engine = TemplateEngine() result = engine.render( \"{{ user.name }} has {{ orders | length }} orders\", { \"user\": {\"name\": \"Alice\"}, \"orders\": [1, 2, 3] } ) assert result == \"Alice has 3 orders\" 3. Property Tests Purpose : Verify template properties Example : @given(st.text(), st.dictionaries(st.text(), st.text())) def test_template_properties(template, context): result = render(template, context) assert isinstance(result, str) assert len(result) >= 0","title":"Architecture"},{"location":"development/architecture/#architecture","text":"This document describes the architecture and design of the Templify library, focusing on practical use cases and real-world scenarios.","title":"Architecture"},{"location":"development/architecture/#overview","text":"Templify is designed as a modular and extensible templating library that supports multiple template formats and data structures. The architecture follows clean architecture principles with clear separation of concerns.","title":"Overview"},{"location":"development/architecture/#system-components","text":"","title":"System Components"},{"location":"development/architecture/#core-components","text":"graph TD A[Template Engine] --> B[Text Renderer] A --> C[Data Renderer] A --> D[Jinja2 Renderer] B --> E[Template Parser] C --> F[JMESPath Engine] D --> G[Jinja2 Environment]","title":"Core Components"},{"location":"development/architecture/#1-template-engine","text":"Purpose : Central coordinator for all template operations Responsibilities : - Route templates to appropriate renderer based on format - Manage template lifecycle (loading, caching, rendering) - Provide unified API for all template types - Handle error propagation and recovery Example Use Case : # Template Engine automatically detects format and routes to appropriate renderer from templify import render # Text template result1 = render(\"Hello, {name}!\", {\"name\": \"Alice\"}) # Data structure template result2 = render({ \"user\": {\"name\": \"{name}\"}, \"settings\": {\"theme\": \"{theme}\"} }, {\"name\": \"Alice\", \"theme\": \"dark\"}) # Jinja2 template result3 = render(\"\"\" {% if user.is_admin %} Welcome, Administrator {{ user.name }}! {% endif %} \"\"\", {\"user\": {\"name\": \"Alice\", \"is_admin\": True}})","title":"1. Template Engine"},{"location":"development/architecture/#2-text-renderer","text":"Purpose : Handle simple text-based templates with placeholders Responsibilities : - Process basic string interpolation - Handle escape sequences and special characters - Support default values and optional variables - Optimize for high-performance text processing Example Use Case : # Simple text template with defaults template = \"Welcome, {name}! Your balance is {balance:0.00}\" context = {\"name\": \"Alice\"} result = render_text(template, context) # Result: \"Welcome, Alice! Your balance is 0.00\" # Text template with escaping template = \"Path: {path}\" context = {\"path\": \"C:\\\\Users\\\\Alice\"} result = render_text(template, context) # Result: \"Path: C:\\Users\\Alice\"","title":"2. Text Renderer"},{"location":"development/architecture/#3-data-renderer","text":"Purpose : Process structured data templates with JMESPath support Responsibilities : - Transform complex data structures - Execute JMESPath queries - Handle recursive template application - Validate data types and structure Example Use Case : # Complex data transformation template = { \"summary\": { \"total_sales\": \"{{ sales | jmespath('sum(@[].amount)') }}\", \"top_product\": \"{{ products | jmespath('max_by(@, &revenue).name') }}\" }, \"recent_orders\": \"{{ orders | jmespath('sort_by(@, &date)[-3:]') }}\" } context = { \"sales\": [ {\"amount\": 100, \"date\": \"2024-01-01\"}, {\"amount\": 200, \"date\": \"2024-01-02\"} ], \"products\": [ {\"name\": \"Product A\", \"revenue\": 1000}, {\"name\": \"Product B\", \"revenue\": 2000} ], \"orders\": [ {\"id\": 1, \"date\": \"2024-01-01\"}, {\"id\": 2, \"date\": \"2024-01-02\"}, {\"id\": 3, \"date\": \"2024-01-03\"}, {\"id\": 4, \"date\": \"2024-01-04\"} ] }","title":"3. Data Renderer"},{"location":"development/architecture/#4-jinja2-renderer","text":"Purpose : Provide full Jinja2 template capabilities Responsibilities : - Execute Jinja2 templates with inheritance - Manage template includes and macros - Handle custom filters and extensions - Support template caching Example Use Case : # Template inheritance base_template = \"\"\" {% block content %} Welcome, {{ user.name }}! {% endblock %} \"\"\" child_template = \"\"\" {% extends \"base\" %} {% block content %} {{ super() }} Your recent activity: {% for activity in user.recent_activities %} - {{ activity.type }}: {{ activity.description }} {% endfor %} {% endblock %} \"\"\" # Custom filter @jinja2_env.filter def format_currency(value): return f\"${value:,.2f}\" # Usage template = \"Total: {{ amount | format_currency }}\" context = {\"amount\": 1234.56}","title":"4. Jinja2 Renderer"},{"location":"development/architecture/#data-flow","text":"sequenceDiagram participant User participant Engine participant Parser participant Renderer participant Cache Note over User: User wants to generate<br/>a personalized report User->>Engine: render(template, context) Note over Engine: Template Engine detects<br/>format and loads template Engine->>Cache: get(template) alt Cache Hit Cache-->>Engine: cached_template Note over Engine: Using cached template<br/>for better performance else Cache Miss Engine->>Parser: parse(template) Parser-->>Engine: parsed_template Engine->>Cache: store(parsed_template) Note over Engine: Template parsed and<br/>cached for future use end Engine->>Renderer: render(parsed_template, context) Note over Renderer: Applying context data<br/>and executing template Renderer-->>Engine: result Engine-->>User: result Note over User: User receives<br/>personalized report","title":"Data Flow"},{"location":"development/architecture/#extension-points","text":"","title":"Extension Points"},{"location":"development/architecture/#1-custom-template-formats","text":"Purpose : Allow users to add support for new template formats Example : class CustomTemplateParser(TemplateParser): def parse(self, template: str) -> ParsedTemplate: # Parse custom template format pass def validate(self, template: str) -> bool: # Validate custom template syntax pass # Register custom parser template_engine.register_parser(\"custom\", CustomTemplateParser())","title":"1. Custom Template Formats"},{"location":"development/architecture/#2-custom-renderers","text":"Purpose : Support new output formats or rendering strategies Example : class PDFRenderer(Renderer): def render(self, template: ParsedTemplate, context: Dict) -> bytes: # Generate PDF from template pass # Register PDF renderer template_engine.register_renderer(\"pdf\", PDFRenderer())","title":"2. Custom Renderers"},{"location":"development/architecture/#3-custom-filters","text":"Purpose : Add custom data transformation capabilities Example : @template_engine.register_filter def format_date(value: datetime) -> str: return value.strftime(\"%Y-%m-%d\") # Usage in template template = \"Last updated: {{ date | format_date }}\"","title":"3. Custom Filters"},{"location":"development/architecture/#error-handling","text":"","title":"Error Handling"},{"location":"development/architecture/#1-template-errors","text":"Purpose : Provide clear feedback for template-related issues Example : try: result = render(\"Hello, {name}!\", {}) except TemplateError as e: print(f\"Template error: {e.message}\") print(f\"Missing variables: {e.missing_variables}\")","title":"1. Template Errors"},{"location":"development/architecture/#2-runtime-errors","text":"Purpose : Handle context and execution errors gracefully Example : try: result = render_data({ \"total\": \"{{ sales | jmespath('sum(@[].amount)') }}\" }, {\"sales\": None}) except RuntimeError as e: print(f\"Runtime error: {e.message}\") print(f\"Error context: {e.context}\")","title":"2. Runtime Errors"},{"location":"development/architecture/#performance-considerations","text":"","title":"Performance Considerations"},{"location":"development/architecture/#1-caching-strategy","text":"Purpose : Optimize template processing for repeated use Example : # Template is parsed once and cached template = \"Hello, {name}!\" context1 = {\"name\": \"Alice\"} context2 = {\"name\": \"Bob\"} # Both renders use cached parsed template result1 = render(template, context1) result2 = render(template, context2)","title":"1. Caching Strategy"},{"location":"development/architecture/#2-optimization-techniques","text":"Purpose : Improve rendering performance for large templates Example : # Pre-compile complex template template = \"\"\" {% for user in users %} {% if user.is_active %} {{ user.name }}: {{ user.balance | format_currency }} {% endif %} {% endfor %} \"\"\" compiled = template_engine.compile(template) # Use compiled template for better performance for batch in user_batches: result = compiled.render(batch)","title":"2. Optimization Techniques"},{"location":"development/architecture/#security","text":"","title":"Security"},{"location":"development/architecture/#1-template-security","text":"Purpose : Prevent template-based security vulnerabilities Example : # Sandboxed template execution template = \"\"\" {% import os %} {{ os.system('rm -rf /') }} \"\"\" # Raises SecurityError: Import of 'os' not allowed","title":"1. Template Security"},{"location":"development/architecture/#2-data-security","text":"Purpose : Protect sensitive data in templates Example : # Context isolation template = \"{{ user.password }}\" # Raises SecurityError template = \"{{ user.name }}\" # Allowed","title":"2. Data Security"},{"location":"development/architecture/#future-extensions","text":"","title":"Future Extensions"},{"location":"development/architecture/#1-planned-features","text":"Purpose : Enhance template capabilities Example : # Future PDF generation template = \"\"\" # Invoice Customer: {{ customer.name }} Items: {% for item in items %} - {{ item.name }}: {{ item.price }} {% endfor %} \"\"\" result = render(template, context, format=\"pdf\")","title":"1. Planned Features"},{"location":"development/architecture/#2-potential-improvements","text":"Purpose : Optimize for specific use cases Example : # Future async rendering async def generate_reports(templates, contexts): tasks = [ render_async(template, context) for template, context in zip(templates, contexts) ] return await asyncio.gather(*tasks)","title":"2. Potential Improvements"},{"location":"development/architecture/#dependencies","text":"","title":"Dependencies"},{"location":"development/architecture/#core-dependencies","text":"Jinja2: Template engine for complex templating JMESPath: Data querying for transformations typing: Type hints for better IDE support dataclasses: Data structure handling","title":"Core Dependencies"},{"location":"development/architecture/#development-dependencies","text":"pytest: Testing framework ruff: Linting mypy: Type checking","title":"Development Dependencies"},{"location":"development/architecture/#testing-strategy","text":"","title":"Testing Strategy"},{"location":"development/architecture/#1-unit-tests","text":"Purpose : Verify individual component behavior Example : def test_text_renderer(): renderer = TextRenderer() result = renderer.render(\"Hello, {name}!\", {\"name\": \"Alice\"}) assert result == \"Hello, Alice!\"","title":"1. Unit Tests"},{"location":"development/architecture/#2-integration-tests","text":"Purpose : Verify component interactions Example : def test_template_engine(): engine = TemplateEngine() result = engine.render( \"{{ user.name }} has {{ orders | length }} orders\", { \"user\": {\"name\": \"Alice\"}, \"orders\": [1, 2, 3] } ) assert result == \"Alice has 3 orders\"","title":"2. Integration Tests"},{"location":"development/architecture/#3-property-tests","text":"Purpose : Verify template properties Example : @given(st.text(), st.dictionaries(st.text(), st.text())) def test_template_properties(template, context): result = render(template, context) assert isinstance(result, str) assert len(result) >= 0","title":"3. Property Tests"},{"location":"reference/requirements/","text":"Requirements This document outlines the functional and non-functional requirements for the Templify project, with practical examples and use cases. Functional Requirements 1. Template Processing 1.1 Text Templates Purpose : Support basic text templating with placeholders Requirements : - Support basic string interpolation with placeholders - Handle escape sequences and special characters - Support default values for missing variables - Provide error messages for missing required variables Example Use Cases : # Basic text template template = \"Hello, {name}!\" context = {\"name\": \"Alice\"} result = render_text(template, context) # Result: \"Hello, Alice!\" # Template with defaults template = \"Welcome, {name}! Your balance is {balance:0.00}\" context = {\"name\": \"Alice\"} result = render_text(template, context) # Result: \"Welcome, Alice! Your balance is 0.00\" # Template with escaping template = \"Path: {path}\" context = {\"path\": \"C:\\\\Users\\\\Alice\"} result = render_text(template, context) # Result: \"Path: C:\\Users\\Alice\" 1.2 Data Structure Templates Purpose : Process structured data with template variables Requirements : - Process nested data structures - Support recursive template application - Handle different data types - Provide type conversion and validation Example Use Cases : # User profile template template = { \"user\": { \"name\": \"{name}\", \"email\": \"{email}\", \"settings\": { \"theme\": \"{theme}\", \"notifications\": \"{notifications}\" } } } context = { \"name\": \"Alice\", \"email\": \"alice@example.com\", \"theme\": \"dark\", \"notifications\": True } # Configuration template template = { \"database\": { \"host\": \"{db_host}\", \"port\": \"{db_port}\", \"name\": \"{db_name}\" }, \"api\": { \"key\": \"{api_key}\", \"endpoint\": \"{api_endpoint}\" } } 1.3 JMESPath Integration Purpose : Enable complex data transformations Requirements : - Support JMESPath queries in templates - Handle complex data transformations - Provide custom JMESPath functions - Support query optimization Example Use Cases : # Sales report template template = { \"summary\": { \"total_sales\": \"{{ sales | jmespath('sum(@[].amount)') }}\", \"top_product\": \"{{ products | jmespath('max_by(@, &revenue).name') }}\", \"average_order\": \"{{ orders | jmespath('sum(@[].total) / length(@)') }}\" }, \"recent_orders\": \"{{ orders | jmespath('sort_by(@, &date)[-3:]') }}\" } # Analytics dashboard template = { \"metrics\": { \"active_users\": \"{{ users | jmespath('count(@[?status==`active`])') }}\", \"revenue_by_category\": \"{{ sales | jmespath('group_by(@, &category) | map_values(&sum(@[].amount))') }}\" } } 1.4 Jinja2 Templates Purpose : Provide full Jinja2 template capabilities Requirements : - Support full Jinja2 syntax - Handle template inheritance - Support template includes - Provide custom filters and extensions Example Use Cases : # Email template with inheritance base_template = \"\"\" {% block content %} Dear {{ user.name }}, {% endblock %} \"\"\" child_template = \"\"\" {% extends \"base\" %} {% block content %} {{ super() }} Your recent activity: {% for activity in user.recent_activities %} - {{ activity.type }}: {{ activity.description }} {% endfor %} {% endblock %} \"\"\" # Invoice template with macros template = \"\"\" {% macro format_currency(value) %} ${{ \"%.2f\"|format(value) }} {% endmacro %} Invoice #{{ invoice.number }} Date: {{ invoice.date | strftime('%Y-%m-%d') }} Items: {% for item in invoice.items %} {{ item.name }}: {{ format_currency(item.price) }} {% endfor %} Total: {{ format_currency(invoice.total) }} \"\"\" 2. Template Management 2.1 Template Loading Purpose : Support flexible template loading Requirements : - Load templates from files - Load templates from strings - Support template directories - Handle template caching Example Use Cases : # Load from file template = load_template(\"templates/invoice.html\") # Load from string template = load_template_string(\"\"\" Hello, {name}! Your balance is {balance} \"\"\") # Load from directory templates = load_template_directory(\"templates/\") 2.2 Template Validation Purpose : Ensure template correctness Requirements : - Validate template syntax - Check for missing variables - Validate data types - Provide detailed error messages Example Use Cases : # Validate template try: validate_template(\"\"\" Hello, {name}! Your balance is {balance:invalid_format} \"\"\") except TemplateError as e: print(f\"Template error: {e.message}\") # Check required variables required = get_required_variables(template) missing = [var for var in required if var not in context] if missing: raise MissingVariablesError(missing) 3. Context Management 3.1 Context Processing Purpose : Handle template context data Requirements : - Handle nested context structures - Support default values - Provide context validation - Handle missing values Example Use Cases : # Nested context context = { \"user\": { \"name\": \"Alice\", \"preferences\": { \"theme\": \"dark\", \"language\": \"en\" } }, \"order\": { \"items\": [ {\"name\": \"Product A\", \"price\": 100}, {\"name\": \"Product B\", \"price\": 200} ] } } # Context with defaults context = { \"name\": \"Alice\", \"theme\": None } defaults = { \"theme\": \"light\", \"language\": \"en\" } 3.2 Variable Resolution Purpose : Resolve template variables Requirements : - Support dot notation - Handle array access - Support function calls - Provide error handling Example Use Cases : # Dot notation template = \"{{ user.preferences.theme }}\" # Array access template = \"{{ order.items[0].name }}\" # Function calls template = \"{{ format_date(order.date) }}\" Non-Functional Requirements 1. Performance 1.1 Response Time Purpose : Ensure fast template processing Requirements : - Template rendering < 100ms for simple templates - Template rendering < 500ms for complex templates - Template parsing < 50ms - Context processing < 50ms Example Performance Targets : # Simple template (should render in < 100ms) template = \"Hello, {name}!\" context = {\"name\": \"Alice\"} # Complex template (should render in < 500ms) template = \"\"\" {% for user in users %} {% if user.is_active %} {{ user.name }}: {{ user.balance | format_currency }} {% endif %} {% endfor %} \"\"\" 1.2 Resource Usage Purpose : Optimize resource consumption Requirements : - Memory usage < 100MB for standard operations - CPU usage < 50% for standard operations - Efficient template caching - Minimal disk I/O Example Resource Limits : # Memory-efficient template processing template = \"Hello, {name}!\" context = {\"name\": \"Alice\"} result = render(template, context, max_memory=100 * 1024 * 1024) # 100MB limit # CPU-efficient batch processing results = render_batch(templates, contexts, max_cpu_percent=50) 2. Scalability 2.1 Load Handling Purpose : Support high-volume processing Requirements : - Support concurrent template processing - Handle large templates (>1MB) - Process multiple templates simultaneously - Support distributed processing Example Scalability Features : # Concurrent processing async def process_templates(templates, contexts): tasks = [ render_async(template, context) for template, context in zip(templates, contexts) ] return await asyncio.gather(*tasks) # Large template handling template = load_large_template(\"template.html\", chunk_size=1024 * 1024) # 1MB chunks 2.2 Resource Management Purpose : Efficient resource utilization Requirements : - Efficient memory management - Proper resource cleanup - Handle resource limits - Support resource monitoring Example Resource Management : # Resource cleanup with TemplateEngine() as engine: result = engine.render(template, context) # Resources automatically cleaned up # Resource monitoring engine = TemplateEngine() engine.set_resource_limits( max_memory=100 * 1024 * 1024, # 100MB max_cpu_percent=50, max_disk_io=1024 * 1024 # 1MB ) 3. Reliability 3.1 Error Handling Purpose : Graceful error management Requirements : - Graceful error recovery - Detailed error messages - Error logging - Error reporting Example Error Handling : try: result = render(template, context) except TemplateError as e: logger.error(f\"Template error: {e.message}\") logger.error(f\"Context: {e.context}\") raise except RuntimeError as e: logger.error(f\"Runtime error: {e.message}\") logger.error(f\"Stack trace: {e.stack_trace}\") raise 3.2 Data Integrity Purpose : Ensure data correctness Requirements : - Template validation - Context validation - Type checking - Data sanitization Example Data Validation : # Template validation validate_template_syntax(template) # Context validation validate_context_types(context, expected_types) # Data sanitization sanitized_context = sanitize_context(context) 4. Security 4.1 Template Security Purpose : Prevent template-based attacks Requirements : - Sandboxed template execution - Resource usage limits - Access control - Input validation Example Security Features : # Sandboxed execution engine = TemplateEngine(sandbox=True) engine.set_security_policy( allowed_functions=[\"format_date\", \"format_currency\"], max_execution_time=1.0, # 1 second max_memory=50 * 1024 * 1024 # 50MB ) # Access control engine.set_access_control( allowed_variables=[\"user.name\", \"order.total\"], forbidden_variables=[\"user.password\", \"api.key\"] ) 4.2 Data Security Purpose : Protect sensitive data Requirements : - Context isolation - Variable escaping - Safe defaults - Security logging Example Security Measures : # Context isolation isolated_context = engine.isolate_context(context) # Variable escaping escaped_value = engine.escape_value(sensitive_data) # Security logging engine.set_security_logging( log_level=\"INFO\", log_file=\"security.log\" ) 5. Maintainability 5.1 Code Quality Purpose : Ensure code maintainability Requirements : - Type hints - Documentation - Test coverage - Code style Example Quality Measures : # Type hints def render(template: str, context: Dict[str, Any]) -> str: \"\"\"Render a template with the given context. Args: template: The template string context: The context dictionary Returns: The rendered result Raises: TemplateError: If template is invalid ContextError: If context is invalid \"\"\" pass # Test coverage def test_render(): template = \"Hello, {name}!\" context = {\"name\": \"Alice\"} result = render(template, context) assert result == \"Hello, Alice!\" 5.2 Extensibility Purpose : Support future extensions Requirements : - Plugin architecture - Custom renderers - Custom parsers - Custom filters Example Extension Points : # Custom renderer class PDFRenderer(Renderer): def render(self, template: str, context: Dict) -> bytes: # Generate PDF pass # Custom filter @template_engine.register_filter def format_currency(value: float) -> str: return f\"${value:,.2f}\" 6. Compatibility 6.1 Platform Support Purpose : Ensure cross-platform compatibility Requirements : - Python 3.12+ - Windows support - Linux support - macOS support Example Platform Features : # Platform-specific path handling template_path = os.path.join(\"templates\", \"invoice.html\") # Platform-specific line endings template = template.replace(\"\\r\\n\", \"\\n\") 6.2 Dependency Management Purpose : Manage project dependencies Requirements : - Poetry for dependency management - Clear dependency specifications - Version compatibility - Dependency updates Example Dependency Management : [tool.poetry.dependencies] python = \"^3.12\" jinja2 = \"^3.1.0\" jmespath = \"^0.10.0\" [tool.poetry.dev-dependencies] pytest = \"^7.4.0\" ruff = \"^0.1.0\" mypy = \"^1.5.0\" Development Requirements 1. Testing 1.1 Test Coverage Purpose : Ensure code quality Requirements : - Unit test coverage > 90% - Integration test coverage > 80% - Property-based testing - Performance testing Example Test Coverage : # Unit test def test_text_renderer(): renderer = TextRenderer() result = renderer.render(\"Hello, {name}!\", {\"name\": \"Alice\"}) assert result == \"Hello, Alice!\" # Property test @given(st.text(), st.dictionaries(st.text(), st.text())) def test_template_properties(template, context): result = render(template, context) assert isinstance(result, str) assert len(result) >= 0 1.2 Test Quality Purpose : Ensure test reliability Requirements : - Clear test cases - Test documentation - Test automation - Continuous integration Example Test Quality : def test_complex_template(): \"\"\"Test rendering of a complex template with nested structures. This test verifies that: 1. Nested dictionaries are properly handled 2. Lists are correctly processed 3. Custom filters work as expected \"\"\" template = \"\"\" {% for user in users %} {% if user.is_active %} {{ user.name }}: {{ user.balance | format_currency }} {% endif %} {% endfor %} \"\"\" context = { \"users\": [ {\"name\": \"Alice\", \"is_active\": True, \"balance\": 1000}, {\"name\": \"Bob\", \"is_active\": False, \"balance\": 2000} ] } result = render(template, context) assert \"Alice: $1,000.00\" in result assert \"Bob\" not in result 2. Documentation 2.1 Code Documentation Purpose : Ensure code understandability Requirements : - Type hints - Docstrings - Comments - Examples Example Documentation : def render_data( template: Dict[str, Any], context: Dict[str, Any], **options: Any ) -> Dict[str, Any]: \"\"\"Render a data structure template. Args: template: The template dictionary context: The context dictionary **options: Additional rendering options Returns: The rendered data structure Example: >>> template = {\"user\": {\"name\": \"{name}\"}} >>> context = {\"name\": \"Alice\"} >>> render_data(template, context) {\"user\": {\"name\": \"Alice\"}} \"\"\" pass 2.2 User Documentation Purpose : Support user adoption Requirements : - Installation guide - Usage guide - API reference - Examples Example User Guide : # Quick Start Guide ## Installation ```bash pip install templify Basic Usage from templify import render # Simple text template result = render(\"Hello, {name}!\", {\"name\": \"Alice\"}) # Data structure template result = render({ \"user\": {\"name\": \"{name}\"} }, {\"name\": \"Alice\"}) # Jinja2 template result = render(\"\"\" {% if user.is_admin %} Welcome, Administrator {{ user.name }}! {% endif %} \"\"\", {\"user\": {\"name\": \"Alice\", \"is_admin\": True}}) ### 3. Development Process #### 3.1 Version Control **Purpose**: Manage code changes **Requirements**: - Git workflow - Branch management - Release process - Changelog maintenance **Example Git Workflow**: ```bash # Feature branch git checkout -b feature/new-template-format git add . git commit -m \"Add support for custom template format\" git push origin feature/new-template-format # Release git tag -a v1.0.0 -m \"Release v1.0.0\" git push origin v1.0.0 3.2 Code Review Purpose : Ensure code quality Requirements : - Pull request process - Code review guidelines - Style checking - Quality gates Example PR Template : ## Description [Describe your changes] ## Type of Change - [ ] Bug fix - [ ] New feature - [ ] Breaking change ## Testing - [ ] Unit tests added/updated - [ ] Integration tests added/updated - [ ] Manual testing completed ## Documentation - [ ] Code documentation updated - [ ] User documentation updated Future Requirements 1. Planned Features Purpose : Guide future development Requirements : - PDF generation - HTML templates - Custom template engines - Advanced caching Example Future Features : # PDF generation result = render(template, context, format=\"pdf\") # HTML templates result = render(template, context, format=\"html\") # Custom template engine class CustomEngine(TemplateEngine): def render(self, template, context): # Custom rendering logic pass 2. Potential Improvements Purpose : Optimize performance and usability Requirements : - Async rendering - Distributed processing - Template validation - Performance monitoring Example Improvements : # Async rendering async def render_async(template, context): return await asyncio.to_thread(render, template, context) # Distributed processing def render_distributed(templates, contexts): with DistributedEngine() as engine: return engine.render_batch(templates, contexts) # Performance monitoring with PerformanceMonitor() as monitor: result = render(template, context) print(f\"Rendering took {monitor.elapsed}ms\") Dependencies 1. Core Dependencies Python 3.12+ Jinja2: Template engine JMESPath: Data querying typing: Type hints dataclasses: Data structures 2. Development Dependencies pytest: Testing ruff: Linting mypy: Type checking mkdocs: Documentation mkdocs-material: Documentation theme","title":"Requirements"},{"location":"reference/requirements/#requirements","text":"This document outlines the functional and non-functional requirements for the Templify project, with practical examples and use cases.","title":"Requirements"},{"location":"reference/requirements/#functional-requirements","text":"","title":"Functional Requirements"},{"location":"reference/requirements/#1-template-processing","text":"","title":"1. Template Processing"},{"location":"reference/requirements/#11-text-templates","text":"Purpose : Support basic text templating with placeholders Requirements : - Support basic string interpolation with placeholders - Handle escape sequences and special characters - Support default values for missing variables - Provide error messages for missing required variables Example Use Cases : # Basic text template template = \"Hello, {name}!\" context = {\"name\": \"Alice\"} result = render_text(template, context) # Result: \"Hello, Alice!\" # Template with defaults template = \"Welcome, {name}! Your balance is {balance:0.00}\" context = {\"name\": \"Alice\"} result = render_text(template, context) # Result: \"Welcome, Alice! Your balance is 0.00\" # Template with escaping template = \"Path: {path}\" context = {\"path\": \"C:\\\\Users\\\\Alice\"} result = render_text(template, context) # Result: \"Path: C:\\Users\\Alice\"","title":"1.1 Text Templates"},{"location":"reference/requirements/#12-data-structure-templates","text":"Purpose : Process structured data with template variables Requirements : - Process nested data structures - Support recursive template application - Handle different data types - Provide type conversion and validation Example Use Cases : # User profile template template = { \"user\": { \"name\": \"{name}\", \"email\": \"{email}\", \"settings\": { \"theme\": \"{theme}\", \"notifications\": \"{notifications}\" } } } context = { \"name\": \"Alice\", \"email\": \"alice@example.com\", \"theme\": \"dark\", \"notifications\": True } # Configuration template template = { \"database\": { \"host\": \"{db_host}\", \"port\": \"{db_port}\", \"name\": \"{db_name}\" }, \"api\": { \"key\": \"{api_key}\", \"endpoint\": \"{api_endpoint}\" } }","title":"1.2 Data Structure Templates"},{"location":"reference/requirements/#13-jmespath-integration","text":"Purpose : Enable complex data transformations Requirements : - Support JMESPath queries in templates - Handle complex data transformations - Provide custom JMESPath functions - Support query optimization Example Use Cases : # Sales report template template = { \"summary\": { \"total_sales\": \"{{ sales | jmespath('sum(@[].amount)') }}\", \"top_product\": \"{{ products | jmespath('max_by(@, &revenue).name') }}\", \"average_order\": \"{{ orders | jmespath('sum(@[].total) / length(@)') }}\" }, \"recent_orders\": \"{{ orders | jmespath('sort_by(@, &date)[-3:]') }}\" } # Analytics dashboard template = { \"metrics\": { \"active_users\": \"{{ users | jmespath('count(@[?status==`active`])') }}\", \"revenue_by_category\": \"{{ sales | jmespath('group_by(@, &category) | map_values(&sum(@[].amount))') }}\" } }","title":"1.3 JMESPath Integration"},{"location":"reference/requirements/#14-jinja2-templates","text":"Purpose : Provide full Jinja2 template capabilities Requirements : - Support full Jinja2 syntax - Handle template inheritance - Support template includes - Provide custom filters and extensions Example Use Cases : # Email template with inheritance base_template = \"\"\" {% block content %} Dear {{ user.name }}, {% endblock %} \"\"\" child_template = \"\"\" {% extends \"base\" %} {% block content %} {{ super() }} Your recent activity: {% for activity in user.recent_activities %} - {{ activity.type }}: {{ activity.description }} {% endfor %} {% endblock %} \"\"\" # Invoice template with macros template = \"\"\" {% macro format_currency(value) %} ${{ \"%.2f\"|format(value) }} {% endmacro %} Invoice #{{ invoice.number }} Date: {{ invoice.date | strftime('%Y-%m-%d') }} Items: {% for item in invoice.items %} {{ item.name }}: {{ format_currency(item.price) }} {% endfor %} Total: {{ format_currency(invoice.total) }} \"\"\"","title":"1.4 Jinja2 Templates"},{"location":"reference/requirements/#2-template-management","text":"","title":"2. Template Management"},{"location":"reference/requirements/#21-template-loading","text":"Purpose : Support flexible template loading Requirements : - Load templates from files - Load templates from strings - Support template directories - Handle template caching Example Use Cases : # Load from file template = load_template(\"templates/invoice.html\") # Load from string template = load_template_string(\"\"\" Hello, {name}! Your balance is {balance} \"\"\") # Load from directory templates = load_template_directory(\"templates/\")","title":"2.1 Template Loading"},{"location":"reference/requirements/#22-template-validation","text":"Purpose : Ensure template correctness Requirements : - Validate template syntax - Check for missing variables - Validate data types - Provide detailed error messages Example Use Cases : # Validate template try: validate_template(\"\"\" Hello, {name}! Your balance is {balance:invalid_format} \"\"\") except TemplateError as e: print(f\"Template error: {e.message}\") # Check required variables required = get_required_variables(template) missing = [var for var in required if var not in context] if missing: raise MissingVariablesError(missing)","title":"2.2 Template Validation"},{"location":"reference/requirements/#3-context-management","text":"","title":"3. Context Management"},{"location":"reference/requirements/#31-context-processing","text":"Purpose : Handle template context data Requirements : - Handle nested context structures - Support default values - Provide context validation - Handle missing values Example Use Cases : # Nested context context = { \"user\": { \"name\": \"Alice\", \"preferences\": { \"theme\": \"dark\", \"language\": \"en\" } }, \"order\": { \"items\": [ {\"name\": \"Product A\", \"price\": 100}, {\"name\": \"Product B\", \"price\": 200} ] } } # Context with defaults context = { \"name\": \"Alice\", \"theme\": None } defaults = { \"theme\": \"light\", \"language\": \"en\" }","title":"3.1 Context Processing"},{"location":"reference/requirements/#32-variable-resolution","text":"Purpose : Resolve template variables Requirements : - Support dot notation - Handle array access - Support function calls - Provide error handling Example Use Cases : # Dot notation template = \"{{ user.preferences.theme }}\" # Array access template = \"{{ order.items[0].name }}\" # Function calls template = \"{{ format_date(order.date) }}\"","title":"3.2 Variable Resolution"},{"location":"reference/requirements/#non-functional-requirements","text":"","title":"Non-Functional Requirements"},{"location":"reference/requirements/#1-performance","text":"","title":"1. Performance"},{"location":"reference/requirements/#11-response-time","text":"Purpose : Ensure fast template processing Requirements : - Template rendering < 100ms for simple templates - Template rendering < 500ms for complex templates - Template parsing < 50ms - Context processing < 50ms Example Performance Targets : # Simple template (should render in < 100ms) template = \"Hello, {name}!\" context = {\"name\": \"Alice\"} # Complex template (should render in < 500ms) template = \"\"\" {% for user in users %} {% if user.is_active %} {{ user.name }}: {{ user.balance | format_currency }} {% endif %} {% endfor %} \"\"\"","title":"1.1 Response Time"},{"location":"reference/requirements/#12-resource-usage","text":"Purpose : Optimize resource consumption Requirements : - Memory usage < 100MB for standard operations - CPU usage < 50% for standard operations - Efficient template caching - Minimal disk I/O Example Resource Limits : # Memory-efficient template processing template = \"Hello, {name}!\" context = {\"name\": \"Alice\"} result = render(template, context, max_memory=100 * 1024 * 1024) # 100MB limit # CPU-efficient batch processing results = render_batch(templates, contexts, max_cpu_percent=50)","title":"1.2 Resource Usage"},{"location":"reference/requirements/#2-scalability","text":"","title":"2. Scalability"},{"location":"reference/requirements/#21-load-handling","text":"Purpose : Support high-volume processing Requirements : - Support concurrent template processing - Handle large templates (>1MB) - Process multiple templates simultaneously - Support distributed processing Example Scalability Features : # Concurrent processing async def process_templates(templates, contexts): tasks = [ render_async(template, context) for template, context in zip(templates, contexts) ] return await asyncio.gather(*tasks) # Large template handling template = load_large_template(\"template.html\", chunk_size=1024 * 1024) # 1MB chunks","title":"2.1 Load Handling"},{"location":"reference/requirements/#22-resource-management","text":"Purpose : Efficient resource utilization Requirements : - Efficient memory management - Proper resource cleanup - Handle resource limits - Support resource monitoring Example Resource Management : # Resource cleanup with TemplateEngine() as engine: result = engine.render(template, context) # Resources automatically cleaned up # Resource monitoring engine = TemplateEngine() engine.set_resource_limits( max_memory=100 * 1024 * 1024, # 100MB max_cpu_percent=50, max_disk_io=1024 * 1024 # 1MB )","title":"2.2 Resource Management"},{"location":"reference/requirements/#3-reliability","text":"","title":"3. Reliability"},{"location":"reference/requirements/#31-error-handling","text":"Purpose : Graceful error management Requirements : - Graceful error recovery - Detailed error messages - Error logging - Error reporting Example Error Handling : try: result = render(template, context) except TemplateError as e: logger.error(f\"Template error: {e.message}\") logger.error(f\"Context: {e.context}\") raise except RuntimeError as e: logger.error(f\"Runtime error: {e.message}\") logger.error(f\"Stack trace: {e.stack_trace}\") raise","title":"3.1 Error Handling"},{"location":"reference/requirements/#32-data-integrity","text":"Purpose : Ensure data correctness Requirements : - Template validation - Context validation - Type checking - Data sanitization Example Data Validation : # Template validation validate_template_syntax(template) # Context validation validate_context_types(context, expected_types) # Data sanitization sanitized_context = sanitize_context(context)","title":"3.2 Data Integrity"},{"location":"reference/requirements/#4-security","text":"","title":"4. Security"},{"location":"reference/requirements/#41-template-security","text":"Purpose : Prevent template-based attacks Requirements : - Sandboxed template execution - Resource usage limits - Access control - Input validation Example Security Features : # Sandboxed execution engine = TemplateEngine(sandbox=True) engine.set_security_policy( allowed_functions=[\"format_date\", \"format_currency\"], max_execution_time=1.0, # 1 second max_memory=50 * 1024 * 1024 # 50MB ) # Access control engine.set_access_control( allowed_variables=[\"user.name\", \"order.total\"], forbidden_variables=[\"user.password\", \"api.key\"] )","title":"4.1 Template Security"},{"location":"reference/requirements/#42-data-security","text":"Purpose : Protect sensitive data Requirements : - Context isolation - Variable escaping - Safe defaults - Security logging Example Security Measures : # Context isolation isolated_context = engine.isolate_context(context) # Variable escaping escaped_value = engine.escape_value(sensitive_data) # Security logging engine.set_security_logging( log_level=\"INFO\", log_file=\"security.log\" )","title":"4.2 Data Security"},{"location":"reference/requirements/#5-maintainability","text":"","title":"5. Maintainability"},{"location":"reference/requirements/#51-code-quality","text":"Purpose : Ensure code maintainability Requirements : - Type hints - Documentation - Test coverage - Code style Example Quality Measures : # Type hints def render(template: str, context: Dict[str, Any]) -> str: \"\"\"Render a template with the given context. Args: template: The template string context: The context dictionary Returns: The rendered result Raises: TemplateError: If template is invalid ContextError: If context is invalid \"\"\" pass # Test coverage def test_render(): template = \"Hello, {name}!\" context = {\"name\": \"Alice\"} result = render(template, context) assert result == \"Hello, Alice!\"","title":"5.1 Code Quality"},{"location":"reference/requirements/#52-extensibility","text":"Purpose : Support future extensions Requirements : - Plugin architecture - Custom renderers - Custom parsers - Custom filters Example Extension Points : # Custom renderer class PDFRenderer(Renderer): def render(self, template: str, context: Dict) -> bytes: # Generate PDF pass # Custom filter @template_engine.register_filter def format_currency(value: float) -> str: return f\"${value:,.2f}\"","title":"5.2 Extensibility"},{"location":"reference/requirements/#6-compatibility","text":"","title":"6. Compatibility"},{"location":"reference/requirements/#61-platform-support","text":"Purpose : Ensure cross-platform compatibility Requirements : - Python 3.12+ - Windows support - Linux support - macOS support Example Platform Features : # Platform-specific path handling template_path = os.path.join(\"templates\", \"invoice.html\") # Platform-specific line endings template = template.replace(\"\\r\\n\", \"\\n\")","title":"6.1 Platform Support"},{"location":"reference/requirements/#62-dependency-management","text":"Purpose : Manage project dependencies Requirements : - Poetry for dependency management - Clear dependency specifications - Version compatibility - Dependency updates Example Dependency Management : [tool.poetry.dependencies] python = \"^3.12\" jinja2 = \"^3.1.0\" jmespath = \"^0.10.0\" [tool.poetry.dev-dependencies] pytest = \"^7.4.0\" ruff = \"^0.1.0\" mypy = \"^1.5.0\"","title":"6.2 Dependency Management"},{"location":"reference/requirements/#development-requirements","text":"","title":"Development Requirements"},{"location":"reference/requirements/#1-testing","text":"","title":"1. Testing"},{"location":"reference/requirements/#11-test-coverage","text":"Purpose : Ensure code quality Requirements : - Unit test coverage > 90% - Integration test coverage > 80% - Property-based testing - Performance testing Example Test Coverage : # Unit test def test_text_renderer(): renderer = TextRenderer() result = renderer.render(\"Hello, {name}!\", {\"name\": \"Alice\"}) assert result == \"Hello, Alice!\" # Property test @given(st.text(), st.dictionaries(st.text(), st.text())) def test_template_properties(template, context): result = render(template, context) assert isinstance(result, str) assert len(result) >= 0","title":"1.1 Test Coverage"},{"location":"reference/requirements/#12-test-quality","text":"Purpose : Ensure test reliability Requirements : - Clear test cases - Test documentation - Test automation - Continuous integration Example Test Quality : def test_complex_template(): \"\"\"Test rendering of a complex template with nested structures. This test verifies that: 1. Nested dictionaries are properly handled 2. Lists are correctly processed 3. Custom filters work as expected \"\"\" template = \"\"\" {% for user in users %} {% if user.is_active %} {{ user.name }}: {{ user.balance | format_currency }} {% endif %} {% endfor %} \"\"\" context = { \"users\": [ {\"name\": \"Alice\", \"is_active\": True, \"balance\": 1000}, {\"name\": \"Bob\", \"is_active\": False, \"balance\": 2000} ] } result = render(template, context) assert \"Alice: $1,000.00\" in result assert \"Bob\" not in result","title":"1.2 Test Quality"},{"location":"reference/requirements/#2-documentation","text":"","title":"2. Documentation"},{"location":"reference/requirements/#21-code-documentation","text":"Purpose : Ensure code understandability Requirements : - Type hints - Docstrings - Comments - Examples Example Documentation : def render_data( template: Dict[str, Any], context: Dict[str, Any], **options: Any ) -> Dict[str, Any]: \"\"\"Render a data structure template. Args: template: The template dictionary context: The context dictionary **options: Additional rendering options Returns: The rendered data structure Example: >>> template = {\"user\": {\"name\": \"{name}\"}} >>> context = {\"name\": \"Alice\"} >>> render_data(template, context) {\"user\": {\"name\": \"Alice\"}} \"\"\" pass","title":"2.1 Code Documentation"},{"location":"reference/requirements/#22-user-documentation","text":"Purpose : Support user adoption Requirements : - Installation guide - Usage guide - API reference - Examples Example User Guide : # Quick Start Guide ## Installation ```bash pip install templify","title":"2.2 User Documentation"},{"location":"reference/requirements/#basic-usage","text":"from templify import render # Simple text template result = render(\"Hello, {name}!\", {\"name\": \"Alice\"}) # Data structure template result = render({ \"user\": {\"name\": \"{name}\"} }, {\"name\": \"Alice\"}) # Jinja2 template result = render(\"\"\" {% if user.is_admin %} Welcome, Administrator {{ user.name }}! {% endif %} \"\"\", {\"user\": {\"name\": \"Alice\", \"is_admin\": True}}) ### 3. Development Process #### 3.1 Version Control **Purpose**: Manage code changes **Requirements**: - Git workflow - Branch management - Release process - Changelog maintenance **Example Git Workflow**: ```bash # Feature branch git checkout -b feature/new-template-format git add . git commit -m \"Add support for custom template format\" git push origin feature/new-template-format # Release git tag -a v1.0.0 -m \"Release v1.0.0\" git push origin v1.0.0","title":"Basic Usage"},{"location":"reference/requirements/#32-code-review","text":"Purpose : Ensure code quality Requirements : - Pull request process - Code review guidelines - Style checking - Quality gates Example PR Template : ## Description [Describe your changes] ## Type of Change - [ ] Bug fix - [ ] New feature - [ ] Breaking change ## Testing - [ ] Unit tests added/updated - [ ] Integration tests added/updated - [ ] Manual testing completed ## Documentation - [ ] Code documentation updated - [ ] User documentation updated","title":"3.2 Code Review"},{"location":"reference/requirements/#future-requirements","text":"","title":"Future Requirements"},{"location":"reference/requirements/#1-planned-features","text":"Purpose : Guide future development Requirements : - PDF generation - HTML templates - Custom template engines - Advanced caching Example Future Features : # PDF generation result = render(template, context, format=\"pdf\") # HTML templates result = render(template, context, format=\"html\") # Custom template engine class CustomEngine(TemplateEngine): def render(self, template, context): # Custom rendering logic pass","title":"1. Planned Features"},{"location":"reference/requirements/#2-potential-improvements","text":"Purpose : Optimize performance and usability Requirements : - Async rendering - Distributed processing - Template validation - Performance monitoring Example Improvements : # Async rendering async def render_async(template, context): return await asyncio.to_thread(render, template, context) # Distributed processing def render_distributed(templates, contexts): with DistributedEngine() as engine: return engine.render_batch(templates, contexts) # Performance monitoring with PerformanceMonitor() as monitor: result = render(template, context) print(f\"Rendering took {monitor.elapsed}ms\")","title":"2. Potential Improvements"},{"location":"reference/requirements/#dependencies","text":"","title":"Dependencies"},{"location":"reference/requirements/#1-core-dependencies","text":"Python 3.12+ Jinja2: Template engine JMESPath: Data querying typing: Type hints dataclasses: Data structures","title":"1. Core Dependencies"},{"location":"reference/requirements/#2-development-dependencies","text":"pytest: Testing ruff: Linting mypy: Type checking mkdocs: Documentation mkdocs-material: Documentation theme","title":"2. Development Dependencies"}]}